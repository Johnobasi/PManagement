@using PermissionManagement.Utility;
@model PermissionManagement.Model.User

@{
    ViewBag.Title = "Create User";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section MainContent {

<div class="row">
	<div class="col-md-12 col-xs-12 col-sm-12 align-text-bottom page-head-line">
		Create User |
		@{var status = Access.IsAccessRightInRoleProfile(Constants.Modules.UserSetup, Constants.AccessRights.Create);
			if (status)
			{
				<a href="@Url.Action("ListUser", "UserSetup")" class="btn btn-link btn-sm text-capitalize">
					<i class="fa fa-arrow-left" aria-hidden="true"></i>
					Back to List
				</a>
				@*@Html.ActionLink("Create New", "CreateUser")*@
			}
		}

	</div>
</div>
  
<div class="row">
				@using (@Html.BeginForm("CreateUser","UserSetup",  FormMethod.Post, new { @class = "form-horizontal col-md-12 col-xs-12 col-xs-offset-0" }))
				{
					@Html.AntiForgeryToken()

					@Html.ValidationSummary(true, "", new { @class = "text-danger" })										
					
					<div class="form-group col-md-6 col-sm-6 col-xs-12">
							@Html.LabelFor(model => model.Initial, htmlAttributes: new { @class = "control-label col-md-2 text-right" })
							<div class="col-md-10">
								@Html.DropDownList("Initial", new SelectList(Html.StaffInitialDropDownList(), "StaffInitialID", "Description", Model.Initial), new { id = "Initial", @class = "form-control input-sm", required = "required" })
								@Html.ValidationMessageFor(model => model.Initial, "", new { @class = "text-danger" })
							</div>
						</div>					

					<div class="form-group col-md-6 col-sm-6 col-xs-12">
							@Html.LabelFor(model => model.AccountType,"Account Type", htmlAttributes: new { @class = "control-label col-md-2 text-right" })
							<div class="col-md-10">
								@Html.DropDownList("AccountType", new SelectList(Html.AccountTypeDropDownList(true), "AccountTypeID", "Description", Model.AccountType), new { id = "Account  Type", @class = "form-control input-sm", onchange = "ShowHideDiv(this);", required = "required" })
								@Html.ValidationMessageFor(model => model.AccountType, "", new { @class = "text-danger" })
							</div>
						</div>
					
					<div class="form-group col-md-6 col-sm-6 col-xs-12">
							@Html.LabelFor(model => model.Username,"Username", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control input-sm", required = "required" } })
								@Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
							</div>
						</div>

					<div class="form-group col-md-6 col-sm-6 col-xs-12">
							@Html.LabelFor(model => model.FirstName,"Firstname", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control input-sm", required = "required" } })
								@Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
							</div>
						</div>
					
					<div class="form-group col-md-6 col-sm-6 col-xs-12">
							@Html.LabelFor(model => model.LastName,"Lastname", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control input-sm", required = "required" } })
								@Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
							</div>
						</div>

					<div class="form-group col-md-6 col-sm-6 col-xs-12">
							@Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control input-sm pull-left", required = "required", @type = "email", @pattern = "[^@]+@[^@]+\\.[a-zA-Z]{2,}$" } })
								@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
							</div>
						</div>
				
					<div class="form-group col-md-6 col-sm-6 col-xs-12">
							@Html.LabelFor(model => model.Telephone, htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.EditorFor(model => model.Telephone, new { htmlAttributes = new { @class = "form-control input-sm", required = "required", @type = "number", @minlength = "11", @maxlength = "11" } })
								@Html.ValidationMessageFor(model => model.Telephone, "", new { @class = "text-danger" })
							</div>
						</div>

					<div class="form-group col-md-6 col-sm-6 col-xs-12" id="roleDiv">
							@Html.LabelFor(model => model.RoleId,"Role Id", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.DropDownList("RoleId", new SelectList(Html.RoleDropDownList(), "RoleId", "RoleName", Model.UserRole.RoleId != Guid.Empty ? Model.UserRole.RoleId.ToString() : Guid.Empty.ToString()), new { id = "RoleId", @class = "form-control input-sm", required = "required" })
								@Html.ValidationMessageFor(model => model.UserRole.RoleId, "", new { @class = "text-danger" })
							</div>
						</div>

					<div class="row" id="pwdDiv" style="display: none;">
						<div class="form-group col-md-6 col-sm-6 col-xs-12">
							@Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control input-sm", required = "required", @type = "password" } })
								@Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
							</div>
						</div>
						<div class="form-group col-md-6 col-sm-6 col-xs-12">
							@Html.LabelFor(model => model.ConfirmPassword,"Confirm Password", htmlAttributes: new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { id = "Confirm Password", @class = "form-control input-sm", required = "required", @type = "password" } })
								@Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
							</div>
						</div>
					</div>

					<div class="form-group col-md-6 col-sm-6 col-xs-12" id="divAccountStatus" style="display: none;">
						<label class="col-sm-4 pull-left active">Will Account Expire</label>
						<div class="col-md-8">
							@Html.EditorFor(model => model.IsAccountExpired, new { htmlAttributes = new { @class = "pull-left" } })
						</div>
					</div>
				
					<div class="form-group col-md-6 col-sm-6 col-xs-12" id="divBranchID" style="display: none;">
						<label class="col-sm-2 pull-left active">BranchID</label>
						<div class="col-md-10">
							@Html.EditorFor(model => model.BranchID, new { htmlAttributes = new { id = "branchID", @class = "form-control input-sm" } })
							@Html.ValidationMessageFor(model => model.BranchID, "", new { @class = "text-danger" })
						</div>
					</div>
				
					<div class="form-group">
						<div class="col-md-12">
							<input type="submit" value="Submit" class="form-control btn-primary" />
						</div>
					</div>
							
				}
        </div>
    
}
@section scripts {
    <script type="text/javascript">
        $(document).ready(function ()
        {
            ShowHideDiv2("@Model.AccountType");
        });
        function ShowHideDiv2(accountTypeChoice)
        {
            var pwdDiv = document.getElementById("pwdDiv");
            var divAccountStatus = document.getElementById('divAccountStatus');
            var divBranchID = document.getElementById('divBranchID');
            if (accountTypeChoice == "AD/Local")
            {
                pwdDiv.style.display = "none";
                roleDiv.style.display = "block";

            } else if (accountTypeChoice == "Local/Local")
            {
                pwdDiv.style.display = "block";
                roleDiv.style.display = "block";
                divAccountStatus.style.display = 'block';
                divBranchID.style.display = 'block';

            } else if (accountTypeChoice == "Local/Finacle")
            {
                pwdDiv.style.display = "block";
                roleDiv.style.display = "none";
            }
        }
        function ShowHideDiv(accountType)
        {
            // var accountType = document.getElementById("AccountType");
            var pwdDiv = document.getElementById("pwdDiv");
            var accExpDiv = document.getElementById("divAccountStatus");
            var divBranchID = document.getElementById("divBranchID");
            if (accountType.value == "AD/Local")
            {
                pwdDiv.style.display = "none";
                roleDiv.style.display = "block";
                accExpDiv.style.display = "none";
                divBranchID.style.display = "none";

            } else if (accountType.value == "Local/Local")
            {
                pwdDiv.style.display = "block";
                roleDiv.style.display = "block";
                accExpDiv.style.display = "block";
                divBranchID.style.display = "block";

            } else if (accountType.value == "Local/Finacle")
            {
                pwdDiv.style.display = "block";
                roleDiv.style.display = "none";
                accExpDiv.style.display = "block";
                divBranchID.style.display = "none";
            }
        }
    </script>
}